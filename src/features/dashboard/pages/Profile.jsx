// src/features/dashboard/pages/Profile.jsx

import React, { useEffect, useState } from "react";
import { useAuth } from "../../../hooks/useAuth";
import { getStudent, updateStudent } from "../../../services/student.service";
// ðŸ”‘ ASSUMPTION: logActivity and getUserActivities are imported and available
import { getUserActivities, logActivity } from "../../../services/activity.service"; 
import {
Â  User,
Â  Edit,
Â  List,
Â  Mail,
Â  Phone,
Â  MapPin,
Â  Loader2,
Â  Calendar,
} from "lucide-react";

// --- Helper to generate default letter avatar (remains unchanged) ---
const generateDefaultAvatar = (name) => {
Â  const firstLetter = (name || "A")[0].toUpperCase();
Â  return `https://ui-avatars.com/api/?name=${encodeURIComponent(
Â  Â  name || "A"
Â  )}&size=128&background=random&color=fff&rounded=true`;
};

// --- Helper Component for Displaying Info Fields (remains unchanged) ---
const ProfileInfoField = ({ label, value, icon: Icon, isLoading }) => (
Â  <div className="flex items-start space-x-3 text-gray-700">
Â  Â  <Icon size={18} className="text-blue-500 mt-1 flex-shrink-0" />
Â  Â  <div>
Â  Â  Â  <span className="font-medium text-gray-500 text-sm">{label}</span>
Â  Â  Â  {isLoading ? (
Â  Â  Â  Â  <div className="h-4 w-32 bg-gray-200 rounded animate-pulse mt-1"></div>
Â  Â  Â  ) : (
Â  Â  Â  Â  <p className="text-base font-semibold">{value || "N/A"}</p>
Â  Â  Â  )}
Â  Â  </div>
Â  </div>
);

// --- Activity List Item Component (CORRECTED to handle fetched data) ---
const ActivityItem = ({ action, createdAt }) => {
    // Format the Firestore Timestamp object for display
    const dateStr = createdAt?.toDate 
        ? createdAt.toDate().toLocaleDateString('en-US', {
            month: 'short', day: 'numeric', year: 'numeric', hour: '2-digit', minute: '2-digit'
        })
        : 'recently'; 

    return (
        <li className="flex justify-between items-center py-2 border-b last:border-b-0">
            {/* Using 'action' field from activity.service.js */}
            <span className="text-gray-700">{action || 'General activity'}</span> 
            <span className="text-sm text-gray-400">{dateStr}</span>
        </li>
    );
};

export default function Profile() {
Â  const { user, initializing } = useAuth();
Â  const [student, setStudent] = useState(null);
Â  const [loading, setLoading] = useState(true);
Â  const [activeTab, setActiveTab] = useState("info");
Â  const [activities, setActivities] = useState([]);
Â  const [isSaving, setIsSaving] = useState(false);
Â  
  // ðŸ”‘ FIX 1: ADD Department and Year to the formData state
Â  const [formData, setFormData] = useState({
Â  Â  name: "",
Â  Â  phone: "",
Â  Â  gender: "",
Â  Â  address: "",
    department: "", // New Field
    year: "",       // New Field
Â  Â  photo: "",
Â  });

Â  // --- Fetch user and activities (MODIFIED to populate new fields) ---
Â  useEffect(() => {
Â  Â  let isMounted = true;
Â  Â  if (!initializing && user) {
Â  Â  Â  setLoading(true);
Â  Â  Â  const fetchProfileData = async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // Fetch student data and activities concurrently
Â  Â  Â  Â  Â  const [studentData, userActivities] = await Promise.all([
Â  Â  Â  Â  Â  Â  getStudent(user.uid),
Â  Â  Â  Â  Â  Â  getUserActivities(user.uid),
Â  Â  Â  Â  Â  ]);

Â  Â  Â  Â  Â  // Use dynamic avatar if no photo
Â  Â  Â  Â  Â  if (studentData && !studentData.photo) {
Â  Â  Â  Â  Â  Â  studentData.photo = generateDefaultAvatar(studentData.name);
Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  if (isMounted) {
Â  Â  Â  Â  Â  Â  setStudent(studentData);
Â  Â  Â  Â  Â  Â  setActivities(userActivities);
Â  Â  Â  Â  Â  Â  if (studentData) {
Â  Â  Â  Â  Â  Â  Â  setFormData({
Â  Â  Â  Â  Â  Â  Â  Â  name: studentData.name || "",
Â  Â  Â  Â  Â  Â  Â  Â  phone: studentData.phone || "",
Â  Â  Â  Â  Â  Â  Â  Â  gender: studentData.gender || "",
Â  Â  Â  Â  Â  Â  Â  Â  address: studentData.address || "",
                department: studentData.department || "", // Populate new field
                year: studentData.year || "",           // Populate new field
Â  Â  Â  Â  Â  Â  Â  Â  photo:
Â  Â  Â  Â  Â  Â  Â  Â  Â  studentData.photo || generateDefaultAvatar(studentData.name),
Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error("Failed to fetch profile data:", error);
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  if (isMounted) setLoading(false);
Â  Â  Â  Â  }
Â  Â  Â  };
Â  Â  Â  fetchProfileData();
Â  Â  } else if (!initializing && !user) {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  Â  return () => {
Â  Â  Â  isMounted = false;
Â  Â  };
Â  }, [user, initializing]);

Â  const handleChange = (e) => {
Â  Â  setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
Â  };

Â  // --- Handle Image Upload to Cloudinary (remains unchanged) ---
Â  const handlePhotoUpload = async (e) => {
Â  Â  const file = e.target.files[0];
Â  Â  if (!file) return;

Â  Â  const cloudName = import.meta.env.VITE_CLOUDINARY_CLOUD_NAME;
Â  Â  const uploadPreset = import.meta.env.VITE_CLOUDINARY_PROFILE_PRESET; 

Â  Â  if (!cloudName || !uploadPreset) {
Â  Â  Â  alert("Cloudinary configuration missing. Check your .env file.");
Â  Â  Â  return;
Â  Â  }

Â  Â  const url = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;
Â  Â  const form = new FormData();
Â  Â  form.append("file", file);
Â  Â  form.append("upload_preset", uploadPreset);

Â  Â  try {
Â  Â  Â  setIsSaving(true);
Â  Â  Â  const res = await fetch(url, { method: "POST", body: form });
Â  Â  Â  const data = await res.json();

Â  Â  Â  if (data.secure_url) {
Â  Â  Â  Â  setFormData((prev) => ({ ...prev, photo: data.secure_url }));
Â  Â  Â  Â  alert("Photo uploaded successfully! Click 'Save Profile' to finalize the change.");
Â  Â  Â  } else {
Â  Â  Â  Â  throw new Error(data.error?.message || "Cloudinary upload error.");
Â  Â  Â  }
Â  Â  } catch (err) {
Â  Â  Â  console.error("Photo upload failed:", err);
Â  Â  Â  alert(`Photo upload failed: ${err.message}`);
Â  Â  } finally {
Â  Â  Â  setIsSaving(false);
Â  Â  }
Â  };

Â  // --- Save updated profile data to Firestore (MODIFIED to log activity) ---
Â  const handleSave = async (e) => {
Â  Â  e.preventDefault();
Â  Â  setIsSaving(true);
Â  Â  try {
Â  Â  Â  await updateStudent(user.uid, formData);
Â  Â  Â  // Update the main student state and revert to info tab
Â  Â  Â  setStudent((prev) => ({ ...prev, ...formData }));
Â  Â  Â  setActiveTab("info");
Â  Â  Â  alert("Profile updated successfully!");
      
      // ðŸ”‘ LOG ACTIVITY: Profile saved
      await logActivity(user.uid, "Updated profile information", 'profile_update');
      
Â  Â  } catch (err) {
Â  Â  Â  console.error("Error updating profile:", err.message);
Â  Â  Â  alert(`Error updating profile: ${err.message}`);
Â  Â  } finally {
Â  Â  Â  setIsSaving(false);
Â  Â  }
Â  };

Â  // --- Initializing/Error States (REMAINS UNCHANGED) ---
Â  if (initializing) {
Â  Â  return (
Â  Â  Â  <div className="flex items-center justify-center p-8 h-64">
Â  Â  Â  Â  <Loader2 className="animate-spin text-blue-500 mr-2" size={32} />
Â  Â  Â  Â  <p className="text-xl text-gray-600">Initializing user session...</p>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (!user) {
Â  Â  return (
Â  Â  Â  <p className="p-6 text-xl font-semibold text-red-600">
Â  Â  Â  Â  Please log in to view your profile.
Â  Â  Â  </p>
Â  Â  );
Â  }
Â  
Â  // --- Main Render ---
Â  return (
Â  Â  <>
Â  Â  Â  <h1 className="text-3xl font-extrabold text-gray-800 mb-6 border-b pb-2">
Â  Â  Â  Â  User Profile
Â  Â  Â  </h1>

Â  Â  Â  <div className="bg-white shadow-xl rounded-xl overflow-hidden max-w-4xl">
Â  Â  Â  Â  {/* Profile Header (remains unchanged) */}
Â  Â  Â  Â  <div className="p-6 border-b bg-gray-50 flex flex-col sm:flex-row items-center space-x-6">
Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  src={formData.photo || generateDefaultAvatar(formData.name)}
Â  Â  Â  Â  Â  Â  alt={formData.name || "Anonymous"}
Â  Â  Â  Â  Â  Â  onError={(e) =>
Â  Â  Â  Â  Â  Â  Â  (e.target.src = generateDefaultAvatar(formData.name))
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  className="w-24 h-24 rounded-full border-4 border-white shadow-md object-cover"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  {loading ? (
Â  Â  Â  Â  Â  Â  Â  <div className="space-y-2">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="h-6 w-56 bg-gray-300 rounded animate-pulse"></div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="h-4 w-20 bg-gray-200 rounded animate-pulse"></div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="h-4 w-48 bg-gray-200 rounded animate-pulse"></div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold text-gray-900">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {student?.name || "Anonymous User"}
Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-blue-600 font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Roll No: {student?.roll || "N/A"}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500 flex items-center mt-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Mail size={16} className="mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  {user.email}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Tabs */}
Â  Â  Â  Â  <div className="p-6">
Â  Â  Â  Â  Â  <div className="flex space-x-6 border-b pb-4 mb-6">
Â  Â  Â  Â  Â  Â  {[
Â  Â  Â  Â  Â  Â  Â  { id: "info", label: "Profile Info", icon: User },
Â  Â  Â  Â  Â  Â  Â  { id: "edit", label: "Edit Profile", icon: Edit },
Â  Â  Â  Â  Â  Â  Â  { id: "activity", label: "Recent Activity", icon: List },
Â  Â  Â  Â  Â  Â  ].map((tab) => (
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  key={tab.id}
Â  Â  Â  Â  Â  Â  Â  Â  className={`pb-2 flex items-center gap-2 transition duration-150 ease-in-out ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  activeTab === tab.id
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? "border-b-2 border-blue-600 font-bold text-blue-600"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : "text-gray-500 hover:text-blue-600"
Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setActiveTab(tab.id)}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <tab.icon size={18} /> {tab.label}
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <div className="pt-4">
Â  Â  Â  Â  Â  Â  {/* Profile Info */}
Â  Â  Â  Â  Â  Â  {activeTab === "info" && (
Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* ðŸ”‘ FIX: Department Field */}
Â  Â  Â  Â  Â  Â  Â  Â  <ProfileInfoField
Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Department"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={student?.department} // Now accessible
Â  Â  Â  Â  Â  Â  Â  Â  Â  icon={List}
Â  Â  Â  Â  Â  Â  Â  Â  Â  isLoading={loading}
Â  Â  Â  Â  Â  Â  Â  Â  />
                  {/* ðŸ”‘ FIX: Current Year Field */}
Â  Â  Â  Â  Â  Â  Â  Â  <ProfileInfoField
Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Current Year"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={student?.year} // Now accessible
Â  Â  Â  Â  Â  Â  Â  Â  Â  icon={Calendar}
Â  Â  Â  Â  Â  Â  Â  Â  Â  isLoading={loading}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <ProfileInfoField
Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Phone Number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={student?.phone}
Â  Â  Â  Â  Â  Â  Â  Â  Â  icon={Phone}
Â  Â  Â  Â  Â  Â  Â  Â  Â  isLoading={loading}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <ProfileInfoField
Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Gender"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={student?.gender}
Â  Â  Â  Â  Â  Â  Â  Â  Â  icon={User}
Â  Â  Â  Â  Â  Â  Â  Â  Â  isLoading={loading}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <div className="md:col-span-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <ProfileInfoField
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  label="Address"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={student?.address}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  icon={MapPin}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isLoading={loading}
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  {/* Edit Profile (FIXED: Added Department and Year inputs) */}
Â  Â  Â  Â  Â  Â  {activeTab === "edit" && (
Â  Â  Â  Â  Â  Â  Â  <form onSubmit={handleSave} className="space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-700">Profile Photo</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  accept="image/*"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handlePhotoUpload}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-1 block w-full"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-700">Full Name</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="name"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-1 block w-full border border-gray-300 rounded-md px-4 py-2 focus:ring-blue-500 focus:border-blue-500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Your Name"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  autoComplete="name"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </label>
                
                {/* ðŸ”‘ FIX: New Department Input */}
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-700">Department</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="department"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.department}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-1 block w-full border border-gray-300 rounded-md px-4 py-2 focus:ring-blue-500 focus:border-blue-500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="e.g., Computer Science"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </label>

                {/* ðŸ”‘ FIX: New Current Year Input */}
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-700">Current Year</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="year"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.year}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-1 block w-full border border-gray-300 rounded-md px-4 py-2 focus:ring-blue-500 focus:border-blue-500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="e.g., 3rd Year"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </label>

                {/* Remaining fields remain unchanged */}
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-700">Phone Number</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="phone"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.phone}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-1 block w-full border border-gray-300 rounded-md px-4 py-2 focus:ring-blue-500 focus:border-blue-500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Phone"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  autoComplete="tel"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-700">Gender</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="gender"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.gender}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-1 block w-full border border-gray-300 rounded-md px-4 py-2 focus:ring-blue-500 focus:border-blue-500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Gender"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  autoComplete="sex"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-gray-700">Address</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="address"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.address}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="mt-1 block w-full border border-gray-300 rounded-md px-4 py-2 focus:ring-blue-500 focus:border-blue-500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Address"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  autoComplete="street-address"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </label>

Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-4 py-3 mt-4 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 flex items-center justify-center"
Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isSaving}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {isSaving ? "Saving..." : "Save Profile"}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  {/* Recent Activity (remains unchanged) */}
Â  Â  Â  Â  Â  Â  {activeTab === "activity" && (
Â  Â  Â  Â  Â  Â  Â  <ul className="divide-y divide-gray-200">
Â  Â  Â  Â  Â  Â  Â  Â  {activities.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-500">No recent activity</p>
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
                    activities.map((act, idx) => (
                        // Corrected to use the standard fields returned by your activity service
                        <ActivityItem key={idx} message={act.action} date={act.createdAt} />
                    ))
                )}
Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </>
Â  );
}