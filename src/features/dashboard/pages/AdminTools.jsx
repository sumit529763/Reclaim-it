// src/features/dashboard/pages/AdminTools.jsx

import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { 
Â  Â  getItemsByStatusForAdmin, 
Â  Â  updateItemStatus,
Â  Â  deleteItem // ðŸ”‘ NEW IMPORT
} from '../../../services/items.service'; 
import { useAuth } from '../../../hooks/useAuth';
import { Clock, CheckCircle, Package, AlertTriangle, ChevronRight, Loader2, Trash2 } from 'lucide-react'; // ICONS ADDED

// Helper component for displaying status and type within the card
const StatusBadge = ({ type, status }) => {
Â  Â  let typeColor = type === 'lost' ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700';
Â  Â  let baseColor = status === 'resolved' ? 'bg-gray-100 text-gray-500' : typeColor;

Â  Â  const statusMap = {
Â  Â  Â  Â  'in_review': 'Pending Review',
Â  Â  Â  Â  'active_lost': 'Active',
Â  Â  Â  Â  'active_found': 'Active',
Â  Â  Â  Â  'resolved': 'Resolved',
Â  Â  };

Â  Â  return (
Â  Â  Â  Â  <span className={`flex items-center gap-1 text-xs font-semibold px-2.5 py-0.5 rounded-full ${baseColor}`}>
Â  Â  Â  Â  Â  Â  <Package size={12} className="hidden sm:block" />
Â  Â  Â  Â  Â  Â  {type.toUpperCase()} / {statusMap[status] || 'N/A'}
Â  Â  Â  Â  </span>
Â  Â  );
};


// --- Admin Item Card Component ---
const AdminItemCard = ({ item, onAction }) => {
Â  Â  // Actions are consolidated into a single handler that takes an actionType
Â  Â  const isReadyForResolution = item.status === 'active_found' || item.status === 'active_lost';
Â  Â  const isReviewPending = item.status === 'in_review';

Â  Â  // Format item ID and date safely
Â  Â  const shortId = item.id.substring(0, 8);
Â  Â  const reportedDate = item.createdAt?.toDate ? item.createdAt.toDate().toLocaleDateString() : 'N/A';
Â  Â  
Â  Â  return (
Â  Â  Â  Â  <div className="border border-gray-200 p-4 rounded-lg shadow-sm bg-white hover:shadow-lg transition flex flex-col sm:flex-row sm:items-center justify-between">
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* ITEM DETAILS & METADATA */}
Â  Â  Â  Â  Â  Â  <div className="flex-1 min-w-0 mb-3 sm:mb-0">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-3 mb-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-bold text-gray-800 truncate">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.title || `Item ID: ${shortId}...`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <StatusBadge type={item.type} status={item.status} />
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600 truncate">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium">Category:</span> {item.category} | 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium ml-2">Location:</span> {item.location}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-gray-500 mt-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Reported by: {item.ownerEmail} on {reportedDate}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* ACTIONS CONTAINER */}
Â  Â  Â  Â  Â  Â  <div className="flex space-x-2 flex-shrink-0 mt-2 sm:mt-0">
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {/* 1. VERIFY & PUBLISH Button (IN REVIEW Tab) */}
Â  Â  Â  Â  Â  Â  Â  Â  {isReviewPending && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const newStatus = item.type === 'found' ? 'active_found' : 'active_lost';
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onAction(item.id, 'update', `Verifying as ${newStatus}`, newStatus); 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-indigo-600 text-white px-3 py-2 rounded-lg text-sm font-semibold hover:bg-indigo-700 transition flex items-center"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AlertTriangle size={16} className="mr-1" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Verify & Publish
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {/* 2. RESOLVE Button (ACTIVE Tabs) */}
Â  Â  Â  Â  Â  Â  Â  Â  {isReadyForResolution && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => onAction(item.id, 'update', 'Marking as RESOLVED/RETURNED', 'resolved')} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-green-600 text-white px-3 py-2 rounded-lg text-sm font-semibold hover:bg-green-700 transition flex items-center"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CheckCircle size={16} className="mr-1" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Mark as Resolved
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ”‘ NEW: DELETE BUTTON (Visible on all tabs for easy cleanup) */}
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => onAction(item.id, 'delete', 'PERMANENTLY DELETE this report')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-red-600 text-white px-3 py-2 rounded-lg text-sm font-semibold hover:bg-red-700 transition flex items-center"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Trash2 size={16} className="mr-1" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Delete
Â  Â  Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  Â  Â  {/* 3. VIEW DETAILS Button (Always visible) */}
Â  Â  Â  Â  Â  Â  Â  Â  <Link
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  to={`/item/${item.id}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  target="_blank" // Opens in new tab for easy review
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="flex items-center text-gray-600 border border-gray-300 px-3 py-2 rounded-lg text-sm hover:bg-gray-100 transition"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  View <ChevronRight size={16} />
Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};


// --- Main Component: AdminTools ---
export default function AdminTools() {
Â  Â  const { isAdmin } = useAuth();
Â  Â  // Maps the key to the specific status filter used in the service function
Â  Â  const [activeTab, setActiveTab] = useState('in_review');
Â  Â  const [items, setItems] = useState([]);
Â  Â  const [loading, setLoading] = useState(false);
Â  Â  
Â  Â  // ðŸ”‘ Map keys to database status fields
Â  Â  const statusMap = {
Â  Â  Â  Â  'in_review': 'in_review',
Â  Â  Â  Â  'active_lost': 'active_lost',
Â  Â  Â  Â  'active_found': 'active_found',
Â  Â  Â  Â  'resolved': 'resolved'
Â  Â  };

Â  Â  // --- Data Fetching Logic ---
Â  Â  const fetchItems = async (status) => {
Â  Â  Â  Â  if (!isAdmin) return;
Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  const data = await getItemsByStatusForAdmin(status);
Â  Â  Â  Â  setItems(data);
Â  Â  Â  Â  setLoading(false);
Â  Â  };

Â  Â  // Load items on tab change
Â  Â  useEffect(() => {
Â  Â  Â  Â  fetchItems(statusMap[activeTab]);
Â  Â  }, [activeTab, isAdmin]);


Â  Â  // 2. Handle the administrative action (UPDATED to handle 'delete')
Â  Â  const handleAdminAction = async (itemId, actionType, message, newStatus = null) => {
Â  Â  Â  Â  if (!window.confirm(`Admin Action: ${message}? This action requires an Admin role.`)) return;

Â  Â  Â  Â  setLoading(true);
Â  Â  Â  Â  let success = false;
Â  Â  Â  Â  
Â  Â  Â  Â  // ðŸ”‘ SWITCH LOGIC: Handle update or delete based on actionType
Â  Â  Â  Â  if (actionType === 'delete') {
Â  Â  Â  Â  Â  Â  success = await deleteItem(itemId); // Call the dedicated delete service
Â  Â  Â  Â  } else if (actionType === 'update' && newStatus) {
Â  Â  Â  Â  Â  Â  success = await updateItemStatus(itemId, newStatus); // Call the status update service
Â  Â  Â  Â  }

Â  Â  Â  Â  if (success) {
Â  Â  Â  Â  Â  Â  alert(`Item successfully ${actionType === 'delete' ? 'DELETED' : 'updated to ' + newStatus}!`);
Â  Â  Â  Â  Â  Â  // Optimistic update: Remove item from the local list
Â  Â  Â  Â  Â  Â  setItems(prevItems => prevItems.filter(item => item.id !== itemId));
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  alert(`Failed to ${actionType} item. Check console and security rules.`);
Â  Â  Â  Â  }
Â  Â  Â  Â  setLoading(false);
Â  Â  };


Â  Â  if (!isAdmin) {
Â  Â  Â  // AdminGuard should handle this, but for safety
Â  Â  Â  return <div className="p-10 text-center text-red-500">ACCESS DENIED. Log in as an Administrator.</div>;
Â  Â  }

Â  Â  return (
Â  Â  Â  Â  <div className="p-4 md:p-8 bg-gray-50 min-h-screen">
Â  Â  Â  Â  Â  Â  <h1 className="text-4xl font-extrabold mb-2 text-indigo-700">Campus Administration</h1>
Â  Â  Â  Â  Â  Â  <p className="mb-8 text-gray-600">Review, approve, and resolve item reports across the campus.</p>

Â  Â  Â  Â  Â  Â  {/* Tab Navigation (Responsive - uses flex-wrap on mobile) */}
Â  Â  Â  Â  Â  Â  <div className="flex flex-wrap sm:flex-nowrap border-b mb-6 bg-white rounded-t-lg shadow-inner">
Â  Â  Â  Â  Â  Â  Â  Â  {Object.keys(statusMap).map(key => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const statusName = key.replace(/_/g, ' ').toUpperCase();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={key}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setActiveTab(key)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`flex-1 text-center py-3 px-4 text-sm sm:text-base font-semibold transition-colors duration-200 whitespace-nowrap 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ${ activeTab === key 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'border-b-4 border-indigo-600 text-indigo-800' 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'text-gray-500 hover:text-gray-700'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {statusName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* Content Area */}
Â  Â  Â  Â  Â  Â  <div className="mt-6 bg-white p-4 md:p-6 rounded-lg shadow-xl">
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold mb-5 text-gray-700 capitalize flex items-center gap-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Clock size={24} className="text-gray-500" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {activeTab.replace(/_/g, ' ')} Queue ({items.length})
Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {loading ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-center py-10 text-indigo-500 font-medium flex items-center justify-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Loader2 size={24} className="animate-spin mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Loading item data...
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  ) : items.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-10 text-gray-500 border border-dashed rounded-lg p-6 bg-gray-50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Package size={32} className="mx-auto mb-3" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-lg font-medium">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  All clear! No items in the **{activeTab.replace(/_/g, ' ')}** queue.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {items.map(item => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AdminItemCard key={item.id} item={item} onAction={handleAdminAction} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
}