// src/services/items.service.js (FINAL & COMPLETE)

import { db } from "../lib/firebase/firebase";
import {
Â  collection,
Â  addDoc,
Â  query,
Â  where,
Â  getDocs,
Â  serverTimestamp,
Â  doc,
Â  getDoc,
Â  updateDoc,
  deleteDoc, // ðŸ”‘ ADDED: Import deleteDoc
Â  orderBy,
} from "firebase/firestore";

const itemsRef = collection(db, "items");

export async function createItem(payload) {
Â  return addDoc(itemsRef, {
Â  Â  ...payload,
Â  Â  // All items start here, hidden from public view
Â  Â  status: "in_review", 
Â  Â  createdAt: serverTimestamp(),
Â  });
}

export async function getMyItems(userId) {
Â  // Fetches all items reported by the user, regardless of status
Â  const q = query(itemsRef, where("ownerId", "==", userId), orderBy("createdAt", "desc"));
Â  try {
Â  Â  Â  const snap = await getDocs(q);
Â  Â  Â  return snap.docs.map((d) => ({ id: d.id, ...d.data() }));
Â  } catch (error) {
Â  Â  Â  console.error("Error fetching my items:", error);
Â  Â  Â  return [];
Â  }
}

export async function getDashboardStats(userId) {
Â  // Used for the dashboard overview cards
Â  const q = query(itemsRef, where("ownerId", "==", userId));
Â  try {
Â  Â  Â  const snap = await getDocs(q);
Â  Â  Â  const reportedCount = snap.docs.length;
Â  Â  Â  let resolvedCount = 0;
Â  Â  Â  let inReviewCount = 0;
Â  Â  Â  snap.docs.forEach((doc) => {
Â  Â  Â  Â  const data = doc.data();
Â  Â  Â  Â  if (data.status === "resolved") {
Â  Â  Â  Â  Â  resolvedCount++;
Â  Â  Â  Â  } else if (data.status === "in_review") {
Â  Â  Â  Â  Â  inReviewCount++;
Â  Â  Â  Â  }
Â  Â  Â  });
Â  Â  Â  return {
Â  Â  Â  Â  reported: reportedCount,
Â  Â  Â  Â  resolved: resolvedCount,
Â  Â  Â  Â  inReview: inReviewCount,
Â  Â  Â  };
Â  } catch (error) {
Â  Â  Â  console.error("Error fetching dashboard stats:", error);
Â  Â  Â  return { reported: 0, resolved: 0, inReview: 0 };
Â  }
}

export async function getItem(itemId) {
Â  try {
Â  Â  const docRef = doc(db, "items", itemId);
Â  Â  const docSnap = await getDoc(docRef);
Â  Â  if (docSnap.exists()) {
Â  Â  Â  return { id: docSnap.id, ...docSnap.data() };
Â  Â  } else {
Â  Â  Â  console.log("No such document!");
Â  Â  Â  return null;
Â  Â  }
Â  } catch (error) {
Â  Â  console.error("Error fetching document:", error);
Â  Â  return null;
Â  }
}

export async function updateItemStatus(itemId, newStatus) {
Â  try {
Â  Â  const itemRef = doc(db, "items", itemId);
Â  Â  await updateDoc(itemRef, {
Â  Â  Â  status: newStatus,
Â  Â  Â  updatedAt: serverTimestamp(),
Â  Â  });
Â  Â  return true;
Â  } catch (error) {
Â  Â  console.error("Error updating item status:", error);
Â  Â  return false;
Â  }
}

/**
 * Admin function to permanently delete an item document.
 */
export async function deleteItem(itemId) {
    try {
        const itemRef = doc(db, "items", itemId);
        await deleteDoc(itemRef);
        return true;
    } catch (error) {
        console.error(`Error deleting item ${itemId}:`, error);
        return false;
    }
}

/**
Â * Admin function to retrieve items matching a specific status (e.g., for review queues).
Â */
export async function getItemsByStatusForAdmin(statusFilter) {
Â  try {
Â  Â  const q = query(
Â  Â  Â  itemsRef, 
Â  Â  Â  where("status", "==", statusFilter), 
Â  Â  Â  orderBy("createdAt", "desc")
Â  Â  );
Â  Â  const snap = await getDocs(q);
Â  Â  return snap.docs.map((d) => ({ id: d.id, ...d.data() }));
Â  } catch (err) {
Â  Â  console.error("Error fetching admin items by status:", err);
Â  Â  return [];
Â  }
}


/**
Â * Public facing function to fetch only verified Lost Items.
Â */
export async function getLostItems() {
Â  const q = query(
Â  Â  itemsRef,
Â  Â  where("status", "==", "active_lost"), 
Â  Â  where("type", "==", "lost"),
Â  Â  orderBy("createdAt", "desc")
Â  );
Â  try {
Â  Â  const snap = await getDocs(q);
Â  Â  return snap.docs.map((d) => ({ id: d.id, ...d.data() }));
Â  } catch (error) {
Â  Â  Â  console.error("Error fetching lost items:", error);
Â  Â  Â  return []; 
Â  }
}

/**
Â * Public facing function to fetch only verified Found Items.
Â */
export async function getFoundItems() {
Â  const q = query(
Â  Â  itemsRef,
Â  Â  where("status", "==", "active_found"), 
Â  Â  where("type", "==", "found"),
Â  Â  orderBy("createdAt", "desc")
Â  );
Â  try {
Â  Â  const snap = await getDocs(q);
Â  Â  return snap.docs.map((d) => ({ id: d.id, ...d.data() }));
Â  } catch (error) {
Â  Â  Â  console.error("Error fetching found items:", error);
Â  Â  Â  return []; 
Â  }
}